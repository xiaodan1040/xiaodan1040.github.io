{"categories":[{"title":"python","uri":"https://xiaodan1040.github.io/categories/python/"},{"title":"syntax","uri":"https://xiaodan1040.github.io/categories/syntax/"},{"title":"themes","uri":"https://xiaodan1040.github.io/categories/themes/"},{"title":"内置函数","uri":"https://xiaodan1040.github.io/categories/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"},{"title":"面试题","uri":"https://xiaodan1040.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"}],"posts":[{"content":"这是一个测试博客文档 agjargjerjtpoqrqjg\ngajaergj\n","id":0,"section":"posts","summary":"这是一个测试博客文档 agjargjerjtpoqrqjg gajaergj","tags":["markdown"],"title":"Gc","uri":"https://xiaodan1040.github.io/gc/","year":"2020"},{"content":"python基础面试题 1、手写一个完整的装饰器模板 # 用于修复被装饰对象的名称空间 from functools import wrape def wapper(func): @wraps(func) def inner(*args, **kwargs): # func执行前的操作 res = func(*args, **kwargs) # func执行后的操作 return res return inner  2、你所知道的能够实现单例模式的方式有哪些，尝试写几个 单例模式：让所有类在实例化时，指向同一内存地址\n实现单例模式的5种方式：\n 通过关键字classmethod 实现 通过装饰器实现 通过__new__ 魔法方法实现 通过导入模块实现 通过元类实现  # 通过关键字classmethod 实现 class Singleton: def __init__(self, *args, **kwargs): pass @classmethod def instance(cls, *args, **kwargs): if not hasattr(cls, '_instance'): cls._instance = cls(*args, **kwargs) return cls._instance  # 通过装饰器实现 def singleton(cls): _instance = {} def inner(*args, **kwargs): if cls not in _instance: _instance[cls] = cls(*args, **kwargs) return _instance[cls] return inner  # 通过__new__ 魔法方法实现 class Singleton: def __new__(cls, *args, **kwargs): if not hasattr(cls, '_instance'): cls._instance = super().__new__(cls) return cls._instance  # 通过导入模块实现 # a.py 被导入的模块 class Singleton: def __init__(self): pass singleton_obj = Singleton() # b.py 导入a.py 模块 from a import singleton_obj print singleton_obj  # 通过元类实现 class SingletonMeta(type): def __call__(cls, *args, **kwargs): if not hasattr(cls, '_instance'): cls._instance = super().__call__(*args, **kwargs) return cls._instance class Singleton(metaclass=SingletonMeta): def __init__(self): pass  3、举例说明map、zip、filter、sorted、reduce 内置函数的作用 *map(func, iterable)\n映射：将函数func用于可迭代对象中的元素，所得到的每个返回值映射到一个map 对象中，可将这个map 对象转换其他容器类型展示结果。只能转换一次，原理：map对象本质是可迭代对象。tuple(map_obj) 或for num in map_obj这样的语句，就是调用了迭代器，执行了 __next__()，再次使用map_obj，里面的内容已被取完\n'''求列表[1,2,3,4,5,6,7,8,9],返回一个n*n 的列表 ''' li = [1, 2, 3, 4, 5, 6, 7, 8, 9] map_obj = map(lambda x: x ** 2, li) print(f'map 对象：{map_obj}') \u0026gt;\u0026gt;\u0026gt; map 对象：\u0026lt;map object at 0x000001F6AEA62588\u0026gt; print(f'转换成元组展示：{tuple(map_obj)}') \u0026gt;\u0026gt;\u0026gt; 转换成元组展示：(1, 4, 9, 16, 25, 36, 49, 64, 81) print(f'转换成列表展示：{list(map_obj)}') \u0026gt;\u0026gt;\u0026gt; 转换成列表展示：[]  *zip(iterable)\n并行迭代：将多个可迭代对象中元素，一一对应打包成一个个元组，将这些元组存放在zip对象中。参数序列不等长，会自动甄别，忽略多余的元素\nli1 = ['name', 'age', 'hobby'] li2 = ['dawn', 28] zip_obj = zip(li1, li2) print(zip_obj) \u0026gt;\u0026gt;\u0026gt; \u0026lt;zip object at 0x0000023ECA4C87C8\u0026gt; print(dict(zip_obj)) \u0026gt;\u0026gt;\u0026gt; {'name': 'dawn', 'age': 28} print(tuple(zip_obj)) \u0026gt;\u0026gt;\u0026gt; ()  filter(func, iterable)\n过滤：通过函数fun判断可迭代对象中的元素是否符合条件，筛选符合条件的元素存放到filter 对象中\n'''求列表['1A','2A','3C','4C','5A']中，返回不包含A的列表 ''' key_list = ['1A', '2A', '3C', '4C', '5A'] filter_obj = filter(lambda key: key.endswith('C'), key_list) print(f'filter 对象：{filter_obj}') \u0026gt;\u0026gt;\u0026gt; filter 对象：\u0026lt;filter object at 0x000002D05C3A95C8\u0026gt; print(f'转换成元组展示：{tuple(filter_obj)}') \u0026gt;\u0026gt;\u0026gt; 转换成元组展示：('3C', '4C') print(f'转换成列表展示：{list(filter_obj)}') \u0026gt;\u0026gt;\u0026gt; 转换成列表展示：[]，原理同map()  sorted(iterable, func, reverser=False)\n排序：通过函数func制定排序规则，对可迭代对象中的元素进行排序，默认为升序，返回一个新的列表\ntuple_obj = ('ada', 'afdf', 'asdasdsasda', 'asdasdf', 'sss') list_obj = sorted(tuple_obj, key=lambda s: s.count('a'), reverse=True) print(list_obj) \u0026gt;\u0026gt;\u0026gt; ['asdasdsasda', 'ada', 'asdasdf', 'afdf', 'sss'] print(tuple(list_obj)) \u0026gt;\u0026gt;\u0026gt; ('asdasdsasda', 'ada', 'asdasdf', 'afdf', 'sss')  reduce(func, sequence, initial=None)\n合并：通过函数对参数序列中元素进行累积计算，即：reduce(func,[1,2,3]) \u0026lt;=\u0026gt; func(func(1,2),3)。注意：使用reduce，需要导入functools 模块，且求和累积，初始值为0，乘积累积，初始值为1\nfrom functools import reduce # 求1-100之内的和 res_sum = reduce(lambda x, y: x + y, range(1, 101)) print(res_sum) # 求1-9的积 res_pro = reduce(lambda x, y: x * y, range(1, 10)) print(res_pro)  4、列举常用的内置函数 数学运算方面\nabs(a) : 求取绝对值。abs(-1) max(list) : 求取list最大值。max([1,2,3]) min(list) : 求取list最小值。min([1,2,3]) sum(list) : 求取list元素的和。 sum([1,2,3]) \u0026gt;\u0026gt;\u0026gt; 6 len(list) : list长度,len([1,2,3]) divmod(a,b): 获取商和余数。 divmod(5,2) \u0026gt;\u0026gt;\u0026gt; (2,1) pow(a,b) : 获取乘方数。pow(2,3) \u0026gt;\u0026gt;\u0026gt; 8 round(a,b) : 获取指定位数的小数。a代表浮点数，b代表要保留的位数。round(3.1415926,2) \u0026gt;\u0026gt;\u0026gt; 3.14 range(a[,b]) : 生成一个a到b的数组,左闭右开。 range(1,10) \u0026gt;\u0026gt;\u0026gt; [1,2,3,4,5,6,7,8,9]  数据类型转换\nint(str) : 转换为int型。int('1') \u0026gt;\u0026gt;\u0026gt; 1 float(int/str) : 将int型或字符型转换为浮点型。float('1') \u0026gt;\u0026gt;\u0026gt; 1.0 str(int) : 转换为字符型。str(1) \u0026gt;\u0026gt;\u0026gt; '1' bool(int) : 转换为布尔类型。 str(0) \u0026gt;\u0026gt;\u0026gt; False str(None) \u0026gt;\u0026gt;\u0026gt; False list(iterable) : 转换为list。 list((1,2,3)) \u0026gt;\u0026gt;\u0026gt; [1,2,3] tuple(iterable) : 转换为tuple。 tuple([1,2,3]) \u0026gt;\u0026gt;\u0026gt;(1,2,3) dict(iterable) : 转换为dict。 dict([('a', 1), ('b', 2), ('c', 3)]) \u0026gt;\u0026gt;\u0026gt; {'a':1, 'b':2, 'c':3} set(iterable) : 转换为set。 set([1,4,2,4,3,5]) \u0026gt;\u0026gt;\u0026gt; {1,2,3,4,5} set({1:'a',2:'b',3:'c'}) \u0026gt;\u0026gt;\u0026gt; {1,2,3} bytes(str,code) : 接收一个字符串，与所要编码的格式，返回一个字节流类型。bytes('abc', 'utf-8') \u0026gt;\u0026gt;\u0026gt; b'abc' bytes(u'爬虫', 'utf-8') \u0026gt;\u0026gt;\u0026gt; b'\\xe7\\x88\\xac\\xe8\\x99\\xab' iter(iterable)： 返回一个可迭代的对象。 iter([1,2,3]) \u0026gt;\u0026gt;\u0026gt; \u0026lt;list_iterator object at 0x0000000003813B00\u0026gt; enumerate(iterable) : 返回一个枚举对象。 hex(int) : 转换为16进制。hex(1024) \u0026gt;\u0026gt;\u0026gt; '0x400' oct(int) : 转换为8进制。 oct(1024) \u0026gt;\u0026gt;\u0026gt; '0o2000' bin(int) : 转换为2进制。 bin(1024) \u0026gt;\u0026gt;\u0026gt; '0b10000000000' chr(int) : 转换数字为相应ASCI码字符。 chr(65) \u0026gt;\u0026gt;\u0026gt; 'A' ord(str) : 转换ASCI字符相应的数字。 ord('A') \u0026gt;\u0026gt;\u0026gt; 65  其他操作\nid()： 返回一个对象的唯一标识值。 type()：返回一个对象的类型。 locals()：返回当前局部变量的字典 globals()：返回当前全局变量的字典。 isinstance()：判断一个对象是否为该类的一个实例。 issubclass()：判断一个类是否为另一个类的子类。 help()：调用系统内置的帮助系统。 hash(object)：返回一个对象的hash值，具有相同值的object具有相同的hash值。 hash('python') \u0026gt;\u0026gt;\u0026gt; 7070808359261009780 reversed(sequence)：生成一个反转序列的迭代器。 reversed('abc') \u0026gt;\u0026gt;\u0026gt; ['c','b','a'] eval()：执行一个表达式，或字符串作为运算。 eval('1+1') \u0026gt;\u0026gt;\u0026gt; 2 exec()：执行python语句。 exec('print(\u0026quot;Python\u0026quot;)') \u0026gt;\u0026gt;\u0026gt; Python next(iterator[, default])：接收一个迭代器，返回迭代器中的数值，如果设置了default，则当迭代器中的元素遍历后，输出default内容。  5、什么是元类?元类的应用场景有哪些，能具体说说吗？ 在python 中，万物皆对象。对象是通过类实例化的结果，类是元类实例化的结果，也就是创建类的类。\n一个类在实例化的过程中，做了以下事情\n 触发元类(创建这个类的类)的 __call__ 方法（通过对象+()的方式触发） 通过 __new__ 方法产生一个空对象（在 __init__触发前触发） 通过 __init__方法初始化这个对象（在实例化的时候触发） 返回这个对象  元类的应用场景\n ORM(Object Relational Mapping) , 即对象-关系映射,就是将关系数据库的一行记录映射为一个对象,一个类对应一个表 实现单例模式  ","id":1,"section":"posts","summary":"python基础面试题 1、手写一个完整的装饰器模板 # 用于修复被装饰对象的名称空间 from functools import wrape def wapper(func): @wraps(func) def inner(*args, **kwargs): # func执行前的操作 res = func(*args, **kwargs) # func","tags":["装饰器","单例","filter","map","reduce","zip","元类"],"title":"python基础面试题01","uri":"https://xiaodan1040.github.io/python-interview01/","year":"2019"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","id":2,"section":"posts","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://xiaodan1040.github.io/markdown-syntax/","year":"2019"},{"content":"","id":3,"section":"posts","summary":"","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://xiaodan1040.github.io/rich-content/","year":"2019"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","id":4,"section":"posts","summary":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de\npectora summo.\u003c/p\u003e","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://xiaodan1040.github.io/placeholder-text/","year":"2019"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }","id":5,"section":"posts","summary":"\u003cp\u003eEmoji can be enabled in a Hugo project in a number of ways.\u003c/p\u003e","tags":["emoji"],"title":"Emoji Support","uri":"https://xiaodan1040.github.io/emoji-support/","year":"2019"}],"tags":[{"title":"css","uri":"https://xiaodan1040.github.io/tags/css/"},{"title":"emoji","uri":"https://xiaodan1040.github.io/tags/emoji/"},{"title":"filter","uri":"https://xiaodan1040.github.io/tags/filter/"},{"title":"html","uri":"https://xiaodan1040.github.io/tags/html/"},{"title":"index","uri":"https://xiaodan1040.github.io/tags/index/"},{"title":"map","uri":"https://xiaodan1040.github.io/tags/map/"},{"title":"markdown","uri":"https://xiaodan1040.github.io/tags/markdown/"},{"title":"privacy","uri":"https://xiaodan1040.github.io/tags/privacy/"},{"title":"reduce","uri":"https://xiaodan1040.github.io/tags/reduce/"},{"title":"shortcodes","uri":"https://xiaodan1040.github.io/tags/shortcodes/"},{"title":"text","uri":"https://xiaodan1040.github.io/tags/text/"},{"title":"themes","uri":"https://xiaodan1040.github.io/tags/themes/"},{"title":"zip","uri":"https://xiaodan1040.github.io/tags/zip/"},{"title":"元类","uri":"https://xiaodan1040.github.io/tags/%E5%85%83%E7%B1%BB/"},{"title":"单例","uri":"https://xiaodan1040.github.io/tags/%E5%8D%95%E4%BE%8B/"},{"title":"装饰器","uri":"https://xiaodan1040.github.io/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"}]}